{"slots":{"0":{"name":"screen","type":{"events":[],"methods":[]}},"1":{"name":"dataBank","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hide()\n\njson = require (\"dkjson\")\nvec3 = require(\"cpml/vec3\")\n\nlocation = \"Lobby\" -- Name of the Location\nknownUser = {} -- knownUser = {\"User1\"} -- multiple user knownUser = {\"User1\",\"User2\",\"User3\"}\nignoreKnown = true -- Doesn't display known user(s) to prevent screen flooding\n\nplayer = database.getPlayer(unit.getMasterPlayerId())\nlatestList = json.decode(dataBank.getStringValue(\"latest\"))\n\nif latestList == nil then latestList={} end\nknown = false\n\nfunction getTime()\n    local hoursOffset = 0\n    local unixTime = math.floor(system.getTime() + 1506729600) - (60*60*(hoursOffset or 0)) --(Oct. 1, 2017, at 00:00) //1506729600 //1506816000\n\n    local hours = math.floor(unixTime / 3600 % 24)\n    local minutes = math.floor(unixTime / 60 % 60)\n    local seconds = math.floor(unixTime % 60)\n\n    local unixTime = math.floor(unixTime / 86400) + 719468\n    local era = math.floor(unixTime / 146097)\n    local doe = math.floor(unixTime - era * 146097)\n    local yoe = math.floor((doe - doe / 1460 + doe / 36524 - doe / 146096) / 365)\n    --local year = math.floor(yoe + era * 400)\n    local doy = doe - math.floor((365 * yoe + yoe / 4 - yoe / 100))\n    local mp = math.floor((5 * doy + 2) / 153)\n    \n    --local year = year + (month <= 2 and 1 or 0)\n    local month = math.floor(mp + (mp < 10 and 3 or -9))\n    local day = math.ceil(doy - (153 * mp + 2) / 5 + 1)\n    \n    month = month < 10 and  \"0\" .. month or month\n    day = day < 10 and  \"0\" .. day or day\n    hours = hours < 10 and  \"0\" .. hours or hours\n    minutes = minutes < 10 and  \"0\" .. minutes or minutes\n    seconds = seconds < 10 and  \"0\" .. seconds or seconds\n    \n    return (day .. \"/\" .. month .. \" \" .. hours .. \":\" .. minutes .. \":\" .. seconds)\nend\n\nfunction redraw()\n    local latestHTML = \"\"\n    local count = 0\n    if latestList ~= {} then\n        for k, v in ipairs(latestList) do\n            local textX = (count>=24 and \"rx/2+\" or \"\")..\"5\"\n            local textY = 20+((count%24)*24)\n            count = count+1\n            latestHTML = latestHTML..\"\"..(v[4] and 'setNextFillColor(layer, 0, 1, 0, 1)\\n' or \"\")..'addText(layer, font, \"'..string.format('%s %s %s\", %s, %s)\\n', v[3], v[1], v[2], textX, textY)\n        end\n    end\n    \n    screen.setRenderScript([[\nlocal rx, ry = getResolution() \nlocal layer = createLayer() \nlocal font = loadFont('FiraMono', 20) \nsetDefaultFillColor(layer, 6, 1, 0, 0, 1)\n        \n]]..latestHTML..[[\n\nlocal layer = createLayer()\nlocal font2 = loadFont('RobotoMono-Bold', 12)\nsetDefaultFillColor(layer, 6, 1, 1, 1, 1)\nsetNextFillColor(layer, 0, 0, 0, 1) \naddBox (layer, rx-155, ry-40, 145, 35)\naddText(layer, font2, 'Location: \"]]..location..[[\"', rx-150, ry-24)\naddText(layer, font2, \"Player Logger v2.1\", rx-150, ry-12)\n]])\nend\n\nfor i, v in pairs(knownUser) do\n    if player.name == v then\n        known = true\n    end\nend\n\nif known then\n    if vec3.new(unit.getMasterPlayerRelativePosition()):len() <= 3 then \n        system.print(\"\")\n        system.print(\"Player Logger V2.1 by Davemane42\")\n        system.print(\"Debug enabled, type 'help' to get a list of commands\")\n        return\n    else\n        system.print(\"Too far away\")\n    end\nend\n\nif (known and ignoreKnown) == false then\n    if latestList[1] ~= nil then\n        if player.name == latestList[1][1] then\n            if latestList ~= {} then\n                table.remove(latestList, 1)\n            end\n        end\n    end\n\n    table.insert(latestList, 1, {player.name, player.id, getTime(), known})\n    dataBank.setStringValue(\"latest\", json.encode(latestList))\nend\n\nredraw()\n\nunit.exit()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"if known == false then system.print(\"UNKNOWN USER CANNOT INPUT COMMAND\"); return end\n\nlocal arguments = {}\nfor word in string.gmatch(text, \"%w+\") do\n    table.insert(arguments, word)\nend\n\nif arguments[1] == \"clear\" then\n    dataBank.clear()\n    system.print(\"DataBank Cleared\")\n    latestList, unknownList = {}, {}\n    redraw()\n    unit.exit()\nelseif arguments[1] == \"dump\" then\n    screen.setHTML(json.encode(latestList))\n    system.print(\"\")\n    system.print(\"dumped tables to the screen HTML\")\n    system.print(\"Right click (on the screen) -> Advanced -> Edit HTML content\")\nelseif arguments[1] == \"remove\" then\n    local i = tonumber(arguments[2])\n    if i and latestList[i] ~= nil then\n        system.print(\"\")\n        system.print(\"removed #\"..i..\"\")\n        table.remove(latestList, i)\n        dataBank.setStringValue(\"latest\", json.encode(latestList))\n        redraw()\n    end\nelseif arguments[1] == \"exit\" then\n    redraw()\n    unit.exit()\nelseif arguments[1] == \"help\" then\n    local help = {\n        \"'clear' [clear the databank]\",\n        \"'dump' [dump the table as JSON in the HTML so you can copy it]\",\n        \"'import' [WIP]\",\n        \"'remove (indice)' [remove the entry from the list\",\n        \"'exit' [exit debug mode]\"\n    }\n    system.print(\"\")\n    for k, v in pairs(help) do\n        system.print(v)\n    end\nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"1"}],"methods":[],"events":[]}