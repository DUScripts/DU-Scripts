{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hide()\n\n-- knownUser = \"User1\"\n-- knownUser = \"User1,User2,User3\"\nknownUser = \"\" --export Keep the list between quote '' and no spaces ex: 'Davemane42,User2'\n\nversion = \"1.0\"\nplayer = database.getPlayer(unit.getMasterPlayerId())\nknown = false\n\n-- Convert knownUser CSV to a table\nknownUserList = {}\nif knownUser ~= \"\" then\n    for name in string.gmatch(knownUser, \"([^,]+)\") do\n        table.insert(knownUserList, name)\n        if player.name == name then\n            known = true\n        end\n    end\nend\n\n-- Loop trough slots and get the screen(s) and door\nscreens = {}\ndoor = nil\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n        local elementClass = slot.getElementClass():lower()\n        if elementClass == \"screenunit\" then\n            slot.slotname = slot_name\n            table.insert(screens, slot)\n        elseif elementClass:find(\"door\") or elementClass == \"airlock\" or elementClass == \"gate\" then\n            door = slot\n        end\n    end\nend\nif door == nil then\n    system.print(\"Missing a door, exiting\")\n    unit.exit()\n    return\nend\n\nif known then door.activate() else door.deactivate() end\n\nif #screens ~= 0 then\n    for k, screen in pairs(screens) do\n        screen.setScriptInput(string.format(\"%s %s\", known, player.name))\n        screen.activate()\n\n        -- Screen code\n        if screen.getScriptOutput() ~= version then   \n            screen.setRenderScript([[\nlocal rx, ry = getResolution() \nlocal layer = createLayer()\nlocal size = 100\nlocal font = loadFont('FiraMono', size)\nlocal version = \"]]..version..[[\"\n\nsetOutput(version)\n\nlocal input = getInput()\nlocal arguments = {}\nfor word in string.gmatch(input, \"%w+\") do\n    table.insert(arguments, word)\nend\n\nlocal text = { \"Restricted\", \"Area\"}\nlocal color = {1,1,1}\nif arguments[1] == \"true\" then\n    text = { arguments[2], \"Autorized\"}\n    color = {0,1,0}\nelseif arguments[1] == \"false\" then\n    text = { arguments[2], \"Unautorized\"}\n    color = {1,0,0}\nend\n\nfor k,v in pairs(text) do\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, color[1], color[2], color[3], 1)\n    addText(layer, font, v, rx/2, ry/2 - ((#text-1)/2)*size + (k-1)*size)\nend\n                ]])\n        end\n    end\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"door.deactivate()\n\nif #screens ~= 0 then\n    for k, screen in pairs(screens) do\n        screen.setScriptInput(\"\")\n    end\nend","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}