{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hideWidget()\n\n-- knownUser = \"User1\"\n-- knownUser = \"User1,User2,User3\"\nknownUser = \"\" --export Keep the list between quotes '' and no spaces ex: 'Davemane42,User2'\nknownOrg = \"\" --export Keep the list between quotes '' and no spaces around the names ex: \"The Prospectors,Org Name2\"\nlocation = \"Lobby\" --export Keep between quotes ''\n\nversion = \"1.5\"\nplayerData = database.getPlayer(player.getId())\nknown = false\n\n-- Convert knownUser CSV to a table\nif knownUser ~= \"\" then\n    for name in string.gmatch(knownUser, \"([^,]+)\") do\n        if playerData.name == name then\n            known = true\n        end\n    end\nend\n\n-- Convert knownOrg CSV to a table\norgList = player.getOrgIds()\nif knownOrg ~= \"\" and #orgList>0 then\n    for name in string.gmatch(knownOrg, \"([^,]+)\") do\n        -- Look trough master player orgs\n        for k, v in pairs(orgList) do\n            if database.getOrganization(v).name == name then\n                known = true\n            end\n        end\n    end\nend\n\n-- Loop trough slots and get the screen(s) and door\nscreens = {}\ndoors = {}\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n        local elementClass = slot.getClass():lower()\n        if elementClass == \"screenunit\" then\n            slot.slotname = slot_name\n            table.insert(screens, slot)\n        elseif elementClass:find(\"door\") or elementClass == \"airlock\" or elementClass == \"gate\" or elementClass == \"forcefieldunit\" then\n            slot.slotname = slot_name\n            table.insert(doors, slot)\n        end\n    end\nend\nif #doors == 0 then\n    system.print(\"Missing a door, exiting\")\n    unit.exit()\n    return\nend\n\nfunction doorsState(state)\n    if #doors ~= 0 then\n        for k, door in pairs(doors) do\n            local elementClass = door.getClass():lower()\n            if state == \"open\" then\n                if elementClass == \"forcefieldunit\" then\n                    door.retract()\n                else\n                    door.open()\n                end\n            elseif state == \"close\" then\n                if elementClass == \"forcefieldunit\" then\n                    door.deploy()\n                else\n                    door.close()\n                end\n            end\n        end\n    end\nend\n\nif known then \n    doorsState(\"open\")\nelse \n    doorsState(\"close\")\nend\n\nif #screens ~= 0 then\n    for k, screen in pairs(screens) do\n        screen.setScriptInput(string.format(\"%s %s\", known, playerData.name))\n        screen.activate()\n\n        -- Screen code\n        if screen.getScriptOutput() ~= string.format(\"%s %s\", version, location) then   \n            screen.setRenderScript([[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\nlocal time = getTime()\n\nlocal version = \"]]..version..[[\"\nlocal location = \"]]..location..[[\"\n\nsetOutput(string.format(\"%s %s\", version, location))\n\nlocal input = getInput()\n                \nif input ~= \"\" then\n    local arguments = {}\n    for word in string.gmatch(input, \"%w+\") do\n        table.insert(arguments, word)\n    end\n\n    local r,g,b = 0,1,0\n    local strCenter = \"WELCOME\"\n    local t = 1\n\n    if arguments[1] == \"false\" then\n        r,g,b = 1,0,0\n        strCenter = \"REFUSED\"\n        t = math.sin(time*10)/2+0.5\n        requestAnimationFrame(1)\n    end\n\n    local fontBig = loadFont(\"RobotoMono-Bold\", 150)\n    local fontSmall = loadFont(\"RobotoMono\", 75)\n    local border = 10\n\n    setBackgroundColor(r,g,b)\n    setDefaultFillColor(layer, Shape_Text, 0, 0, 0, 1)\n    setDefaultTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setDefaultFillColor(layer, Shape_Box, 0, 0, 0, 1)\n\n    -- Top Warning\n    local height = ry*0.1\n\n    addBox(layer, 0, height-20, rx, 40)\n\n    local str = \"WARNING\"\n    local strWidth = getTextBounds(fontSmall, str)\n    setNextFillColor(layer, r,g,b, 1)\n    addBox(layer, rx/2-strWidth/2-border, height-20, strWidth+border*2, 40)\n    addText(layer, fontSmall, str, rx/2, height)\n\n    -- Middle Text\n    local height = ry*0.4\n    local strWidth, strHeight = getTextBounds(fontBig, strCenter)\n    setNextFillColor(layer, 0, 0, 0, t)\n    addText(layer, fontBig, strCenter, rx/2, height)\n\n    local left = createLayer()\n    setDefaultStrokeColor(left, Shape_Line, 0, 0, 0, 1)\n    setDefaultStrokeWidth(left, Shape_Line, 50)\n\n    setLayerClipRect(left, 0, 0, rx/2-strWidth/2-border, strHeight+border*2)\n    setLayerTranslation(left, 0, height-strHeight/2-border)\n\n    addLine(left, -50, 50, 50, -50)\n    addLine(left, -50, 50+150, 50+150, -50)\n    addLine(left, -50, 50+300, 50+300, -50)\n\n    local right = createLayer()\n    setDefaultStrokeColor(right, Shape_Line, 0, 0, 0, 1)\n    setDefaultStrokeWidth(right, Shape_Line, 50)\n\n    setLayerClipRect(right, rx/2+strWidth/2+border, 0, rx/2-strWidth/2-border, strHeight+border*2)\n    setLayerTranslation(right, 0, height-strHeight/2-border)\n\n    addLine(right, rx+50, 50, rx-50, -50)\n    addLine(right, rx+50, 50+150, rx-50-150, -50)\n    addLine(right, rx+50, 50+350, rx-50-350, -50)\n\n    -- Username\n    addBox(layer, 0, ry*0.65-4, rx, 8)\n    addText(layer, fontSmall, arguments[2], rx/2, ry*0.75)\n\n    -- Bottom Text\n    local height = ry*0.9\n\n    addBox(layer, 0, height-10, rx, 20)\n\n    local strWidth = getTextBounds(fontSmall, location)\n    setNextFillColor(layer, r,g,b, 1)\n    addBox(layer, rx/2-strWidth/2-border, height-10, strWidth+border*2, 20)\n    addText(layer, fontSmall, location, rx/2, height)\nelse\n    local size = 100\n    local font = loadFont(\"RobotoMono-Bold\", size)\n    local text = { \"Restricted\", \"Area\"}\n    for k,v in pairs(text) do\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n        setNextFillColor(layer, 1, 1, 1, 1)\n        addText(layer, font, v, rx/2, ry/2 - ((#text-1)/2)*size + (k-1)*size)\n    end\nend\n                ]])\n        end\n    end\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"doorsState(\"close\")\n\nif #screens ~= 0 then\n    for k, screen in pairs(screens) do\n        screen.setScriptInput(\"\")\n    end\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}