{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"vec3 = require(\"cpml/vec3\")\nunit.hideWidget()\n\n-- knownUser = \"User1\"\n-- knownUser = \"User1,User2,User3\"\nknownUser = \"\" --export <p style=\"font-size:150%;\">ex: \"Davemane42,User2\"</p><p style=\"font-size:150%; color:red\";\">Keep the list between quotes \"\"</p>\nknownOrg = \"\" --export <p style=\"font-size:150%;\">ex: \"The Prospectors,Org Name2\"</p><p style=\"font-size:150%; color:red\";\">Keep the list between quotes \"\"</p>\n\nzoneRadius = 5 --export <p style=\"font-size:150%;\">Maximum radius of a zone in meters</p><br><p style=\"font-size:150%; color:green;\">Default: 5</p>\n\nstandbyTextColor = \"192, 203, 220\" --export <p style=\"font-size:150%; color:rgb(192, 203, 220);\">Default: \"192, 203, 220\"<p><p style=\"font-size:150%; color:red;\">Keep R,G,B between quotes \"\"</p>\nstandbyBackgroundColor = \"24, 20, 37\" --export <p style=\"font-size:150%; background-color:rgb(24, 20, 37);\">Default: \"24, 20, 37\"<p><p style=\"font-size:150%; color:red;\">Keep R,G,B between quotes \"\"</p>\nknownTextColor = \"192, 203, 220\" --export <p style=\"font-size:150%; color:rgb(192, 203, 220);\">Default: \"192, 203, 220\"<p><p style=\"font-size:150%; color:red;\">Keep R,G,B between quotes \"\"</p>\nknownBackgroundColor = \"24, 20, 37\" --export <p style=\"font-size:150%; background-color:rgb(24, 20, 37);\">Default: \"24, 20, 37\"<p><p style=\"font-size:150%; color:red;\">Keep R,G,B between quotes \"\"</p>\nunknownTextColor = \"192, 203, 220\" --export <p style=\"font-size:150%; color:rgb(192, 203, 220);\">Default: \"192, 203, 220\"<p><p style=\"font-size:150%; color:red;\">Keep R,G,B between quotes \"\"</p>\nunknownBackgroundColor = \"255, 0, 0\" --export <p style=\"font-size:150%; background-color:rgb(255, 0, 0);\">Default: \"255, 0, 0\"<p><p style=\"font-size:150%; color:red;\">Keep R,G,B between quotes \"\"</p>\n\ndisplayEmptyZoneNumber = true --export <p style=\"font-size:150%;\">Display empty names as</p><p style=\"font-size:150%;\">\"Zone 1\"</p><p style=\"font-size:150%;\">\"Zone 2\"</p><p style=\"font-size:150%;\">\"Zone 3\"</p><p style=\"font-size:150%;\">ect...</p><br><p style=\"font-size:150%; color:green;\">Default: true</p>\nzone1 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone2 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone3 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone4 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone5 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone6 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone7 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone8 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzone9 = \"\" --export <p style=\"font-size:150%; color:red\";\">Keep between quotes \"\"</p>\nzoneName = {zone1, zone2, zone3, zone4, zone5, zone6, zone7, zone8, zone9}\n\nupdateScreens = false --export <p style=\"font-size:150%;\">Update screens</p><br><p style=\"font-size:150%; color:green;\">Default: false</p><p style=\"font-size:150%; color:red;\">Turn back off if not needed</p>\n\nplayerData = database.getPlayer(player.getId())\nknown = false\n\n-- Loop trough slots and get the screen(s) and door(s)\nscreens = {}\ndoors = {}\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getClass then\n        local elementClass = slot.getClass():lower()\n        \n        local pos = slot.getPosition()\n        slot.position = vec3.new(pos[1],pos[2],pos[3])\n        \n        slot.slotname = slot_name\n        \n        if elementClass == \"screenunit\" then\n            table.insert(screens, slot)\n        elseif elementClass:find(\"door\") or elementClass == \"airlock\" or elementClass == \"gate\" or elementClass == \"forcefieldunit\" then\n            table.insert(doors, slot)\n        end\n    end\nend\nif #doors == 0 then\n    system.print(\"Missing a door, exiting\")\n    unit.exit()\n    return\nend\n\ntable.sort(doors, function(a,b) return a.slotname < b.slotname end)\n\n-- Group doors/screen into zones\nzones = {}\nfor k, v in pairs(doors) do\n    if v.zone == nil then\n        zoneID = #zones+1\n        doors[k].zone = zoneID\n        zones[zoneID] = {[\"door\"]={k}, [\"screen\"]={}, [\"position\"]=v.position, [\"name\"]=zoneName[zoneID] or \"\"}\n        local elementClass = v.getClass():lower()\n        local id = v.getItemId()\n        \n        for kk, vv in pairs(doors) do\n            local valid = false\n            if vv.getItemId() == id then valid=true end\n            if vv.getClass():lower() ~= elementClass then valid=false end\n            \n            if kk ~= k and valid then\n                if vv.zone == nil and v.position.dist(v.position, vv.position) < zoneRadius then\n                    doors[kk].zone = zoneID\n                    table.insert(zones[zoneID][\"door\"], kk)\n                end\n            end\n        end\n    end\nend\n\nfunction getClosestZone(pos, max)\n    local max = max or 999\n    local closest = {nil, 10000}\n    for k, v in pairs(zones) do\n        local distance = pos.dist(pos, v.position)\n        if distance < closest[2] and distance < max then\n            closest = {k, distance}\n        end\n    end\n    \n    return closest[1]\nend\n\nclosestZone = getClosestZone(vec3.new(player.getPosition()), 25)\n\nif #screens ~= 0 then\n    for k, v in pairs(screens) do\n        local closest = getClosestZone(v.position)\n        if closest ~= nil then\n            table.insert(zones[closest][\"screen\"], k)\n        end\n    end\nend\n\nlocal colorHash = 0\nlocal str = string.format(\"%s,%s,%s,%s,%s,%s\",standbyTextColor, standbyBackgroundColor, knownTextColor, knownBackgroundColor, unknownTextColor, unknownBackgroundColor)\nfor x in string.gmatch(str, \"([^,]+)\") do colorHash = colorHash+tonumber(x) end\n\n-- Update screens if necessary\nlocal version = \"2.0\"\nfor k, v in pairs(zones) do\n    if #v[\"screen\"] ~= 0 then\n        for kk, vv in pairs(v[\"screen\"]) do\n            screens[vv].activate()\n            local location = v.name\n            if displayEmptyZoneNumber and location == \"\" then\n                location = string.format(\"ZONE %s\", k)\n            end\n\n            if updateScreens or screens[vv].getScriptOutput() ~= string.format(\"%s %s %s\", version, location, colorHash) then\n                -- Screen code\n                screens[vv].setRenderScript([[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\nlocal time = getTime()\nlocal input = getInput()\n                    \n]].. string.format([[\nlocal version = \"%s\"\nlocal location = \"%s\"\nlocal colorHash = %s\nlocal standbyTextColor = {%s}\nlocal standbyBackgroundColor = {%s}\nlocal knownTextColor = {%s}\nlocal knownBackgroundColor = {%s}\nlocal unknownTextColor = {%s}\nlocal unknownBackgroundColor = {%s}]],\nversion,\nlocation,\ncolorHash,\nstandbyTextColor,\nstandbyBackgroundColor,\nknownTextColor,\nknownBackgroundColor,\nunknownTextColor,\nunknownBackgroundColor)..[[\n\n\nsetOutput(string.format(\"%s %s %s\", version, location, colorHash))\n\nlocal fontBig = loadFont(\"RobotoMono-Bold\", 150)\nlocal fontSmall = loadFont(\"RobotoMono\", 75)\n\nfunction getColor(var)\n    return var[1]/255, var[2]/255, var[3]/255 \nend\n\nlocal backR, backG, backB = getColor(standbyBackgroundColor)\nlocal textR, textG, textB = getColor(standbyTextColor)\nlocal strCenter = \"RESTRICTED\"\nlocal username = \"\"\nlocal t = 1\n\nif input ~= \"\" then\n    local arguments = {}\n    for word in string.gmatch(input, \"([^,]+)\") do\n        table.insert(arguments, word:match(\"^%s*(.-)%s*$\"))\n    end\n\n    if arguments[1] == \"true\" then\n        backR, backG, backB = getColor(knownBackgroundColor)\n        textR, textG, textB = getColor(knownTextColor)\n        strCenter = \"WELCOME\"\n        t = 1\n    elseif arguments[1] == \"false\" then\n        backR, backG, backB = getColor(unknownBackgroundColor)\n        textR, textG, textB = getColor(unknownTextColor)\n        strCenter = \"REFUSED\"\n        t = math.sin(time*10)/2+0.5\n        requestAnimationFrame(1)\n    end\n    \n    username = arguments[2]\nend\n\nsetBackgroundColor(backR, backG, backB)\nsetDefaultFillColor(layer, Shape_Text, textR, textG, textB, 1)\nsetDefaultTextAlign(layer, AlignH_Center, AlignV_Middle)\nsetDefaultFillColor(layer, Shape_Box, textR, textG, textB, 1)\n\nfunction drawLineText(text, font, height, lineWidth)\n    local border = 15\n    addBox(layer, 0, height-lineWidth/2, rx, lineWidth)\n\n    if text ~= \"\" then\n        local strWidth = getTextBounds(font, text)\n        setNextFillColor(layer, backR, backG, backB, 1)\n        addBox(layer, rx/2-strWidth/2-border, height-lineWidth/2-5, strWidth+border*2, lineWidth+10)\n        addText(layer, font, text, rx/2, height)\n    end\nend\n\n-- Top Warning\ndrawLineText(\"WARNING\", fontSmall, ry*0.1, 40)\n\n-- Bottom Location\ndrawLineText(location, fontSmall, ry*0.9, 20)\n\n-- Middle Text\nlocal height = ry*0.4\nlocal strWidth, strHeight = getTextBounds(fontBig, strCenter)\nsetNextFillColor(layer, textR, textG, textB, t)\naddText(layer, fontBig, strCenter, rx/2, height)\nif input == \"\" then\n    addText(layer, fontBig, \"AREA\", rx/2, ry*0.65)\nend\n\n-- Username\nif input ~= \"\" then\n    addBox(layer, 0, ry*0.65-4, rx, 8)\n    addText(layer, fontSmall, username, rx/2, ry*0.75)\nend           \n                    ]])\n            end\n        end\n    end\nend\n\n-- Convert knownUser CSV to a table\nif knownUser ~= \"\" then\n    for name in string.gmatch(knownUser, \"([^,]+)\") do\n        if playerData.name == name:match(\"^%s*(.-)%s*$\") then\n            known = true\n        end\n    end\nend\n\n-- Convert knownOrg CSV to a table\norgList = player.getOrgIds()\nif knownOrg ~= \"\" and #orgList>0 then\n    for name in string.gmatch(knownOrg, \"([^,]+)\") do\n        -- Look trough master player orgs\n        for k, v in pairs(orgList) do\n            if database.getOrganization(v).name == name:match(\"^%s*(.-)%s*$\") then\n                known = true\n            end\n        end\n    end\nend\n\nfunction doorsState(zone, state)\n    for k, v in pairs(zones[zone][\"door\"]) do\n        door = doors[v]\n        local elementClass = door.getClass():lower()\n        if state == \"open\" then\n            if elementClass == \"forcefieldunit\" then\n                door.retract()\n            else\n                door.open()\n            end\n        elseif state == \"close\" then\n            if elementClass == \"forcefieldunit\" then\n                door.deploy()\n            else\n                door.close()\n            end\n        end\n    end\n    if #zones[zone][\"screen\"] ~= 0 then\n        for k, v in pairs(zones[zone][\"screen\"]) do\n            screens[v].setScriptInput(string.format(\"%s,%s\", known, playerData.name))\n        end\n    end\nend\n\nif closestZone ~= nil then\n    if known then\n        doorsState(closestZone, \"open\")\n    else \n        doorsState(closestZone, \"close\")\n    end\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"if closestZone ~= nil then\n    doorsState(closestZone, \"close\")\n    \n    if screens ~= 0 then\n        for k, v in pairs(screens) do\n            v.setScriptInput(\"\")\n        end\n    end\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}