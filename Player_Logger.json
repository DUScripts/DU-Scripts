{"slots":{"0":{"name":"screen","type":{"events":[],"methods":[]}},"1":{"name":"dataBank","type":{"events":[],"methods":[]}},"2":{"name":"switch","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hide()\n\njson = require (\"dkjson\")\n\nknownUser = {} -- knownUser = {\"User1\"} -- multiple user knownUser = {\"User1\",\"User2\",\"User3\"}\nplayer = database.getPlayer(unit.getMasterPlayerId())\nlatestList = json.decode(dataBank.getStringValue(\"latest\"))\nunknownList = json.decode(dataBank.getStringValue(\"unknown\"))\nknown = false\n\nif unknownList == nil then unknownList={} end\nif latestList == nil then latestList={} end\n\nfunction getTime()\n    local now = math.floor(system.getTime() + 1506729600) --(Oct. 1, 2017, at 00:00) //1506729600 //1506816000\n    local hours = math.floor((now % 86400) / 3600)\n    local minutes = math.floor((now % 3600) / 60)\n    local seconds = math.floor(now % 60)\n    \n    if hours < 10 then hours = \"0\"..hours end\n    if minutes < 10 then minutes = \"0\"..minutes end\n    if seconds < 10 then seconds = \"0\"..seconds end\n    \n    return string.format(\"%s:%s:%s\", hours, minutes, seconds)\nend\n\nfunction redraw()\n    local latestHTML = \"\"\n    if latestList ~= {} then\n        for k, v in ipairs(latestList) do\n            latestHTML = latestHTML..'<div class='..(v[4] and '\"green\"' or '\"white\"')..'>'..string.format(\"%s %s %s\", v[3], v[1], v[2])..'</div>\\n            '\n        end\n    end\n\n    local unknownHTML = \"\"\n    if unknownList ~= {} then\n        for k, v in ipairs(unknownList) do\n            unknownHTML = unknownHTML..'<div class=\"red\">'..string.format(\"%s %s %s\", v[3], v[1], v[2])..'</div>\\n            '\n        end\n    end\n    \n    screen.setHTML([[\n    <style>\n        .column {\n        float: left;\n        width: 50%;\n        font-size:4vh;\n        line-height:4vh;\n        font-weight:bold;\n        font-family:Montserrat;\n        }\n\n        .row:after {\n        content: \"\";\n        display: table;\n        clear: both;\n        }\n        \n        .white {\n        color:white;\n        }\n        \n        .red {\n        color:red;\n        }\n        \n        .green {\n        color:green;\n        }\n        \n    </style>\n    <div class=\"row\">\n        <div class=\"column\" style=\"\">\n            <h1 style=font-size:4vh;>Latest detection</h1>\n            ]]..latestHTML..[[ \n        </div>\n        <div class=\"column\" style=\"\">\n            <h1 style=font-size:4vh;>Latest unknown detection</h1>\n            ]]..unknownHTML..[[ \n        </div>\n    </div>\n    <div style=position:absolute;bottom:0;right:0;color:red;font-size:2vh;font-weight:bold;font-family:Montserrat;padding-right:1vh;>Version 1.0</div>\n    ]])\nend\n\nfor i, v in pairs(knownUser) do\n    if player.name == v then\n        known = true\n    end\nend\n\nif switch.getState() == 0 then \n    if known then \n        system.print(\"Debug enabled, type 'help' to get a list of commands\")\n    end\n    return\nend\n\nif known == false then\n    if unknownList ~= {} then\n        for k, v in pairs(unknownList) do\n            if player.name == v[1] then\n                table.remove(unknownList, k)\n            end\n        end\n    end\n    table.insert(unknownList, 1, {player.name, player.id, getTime()})\n    dataBank.setStringValue(\"unknown\", json.encode(unknownList))\nend\n\ntable.insert(latestList, 1, {player.name, player.id, getTime(), known})\ndataBank.setStringValue(\"latest\", json.encode(latestList))\n\nredraw()\n\nswitch.deactivate()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"if known == false then system.print(\"UNKNOWN USER CANNOT INPUT COMMAND\"); return end\n\nlocal arguments = {}\nfor word in string.gmatch(text, \"%w+\") do\n    table.insert(arguments, word)\nend\n\nif arguments[1] == \"clear\" then\n    dataBank.clear()\n    system.print(\"DataBank Cleared\")\n    latestList, unknownList = {}, {}\n    redraw()\n    switch.activate()\n    switch.deactivate()\nelseif arguments[1] == \"dump\" then\n    if arguments[2] == \"latest\" then\n        screen.setHTML(json.encode(latestList))\n        system.print(\"dumped 'latest' table to the screen HTML\")\n    elseif arguments[2] == \"unknown\" then\n        screen.setHTML(json.encode(unknownList))\n        system.print(\"dumped 'unknown' table to the screen HTML\")\n    end\nelseif arguments[1] == \"remove\" then\n    local i = tonumber(arguments[3])\n    if arguments[2] == \"latest\" then\n        if i and latestList[i] ~= nil then\n            table.remove(latestList, i)\n            dataBank.setStringValue(\"latest\", json.encode(latestList))\n            system.print(\"removed #\"..i..\" in latest\")\n            redraw()\n        end\n    elseif arguments[2] == \"unknown\" then\n        if i and unknownList[i] ~= nil then\n            table.remove(unknownList, i)\n            dataBank.setStringValue(\"unknown\", json.encode(unknownList))\n            system.print(\"removed #\"..i..\" in unknown\")\n            redraw()\n        end\n    end\nelseif arguments[1] == \"exit\" then\n    redraw()\n    switch.activate()\n    switch.deactivate()\nelseif arguments[1] == \"help\" then\n    local help = {\n        \"'clear' [clear the databank]\",\n        \"'dump latest/unknown' [dump the table as JSON in the HTML so you can copy it]\",\n        \"'remove latest/unknown indice' [remove an entry from one of the table]\",\n        \"'exit' [exit debug mode]\"\n    }\n    for k, v in pairs(help) do\n        system.print(v)\n    end\nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"1"}],"methods":[],"events":[]}
